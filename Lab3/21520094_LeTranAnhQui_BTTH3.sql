----1. Tham số vào là MSGV, TENGV, SODT, DIACHI, MSHH, NAMHH. Trước khi insert dữ liệu cần kiểm tra MSHH đã tồn tại trong table HOCHAM chưa, nếu chưa thì trả về giá trị 0.  
use QLDT; 

CREATE PROCEDURE PRO_INSERT_GV
	@MSGV INT, @TENGV NVARCHAR(30), @SODT NVARCHAR(10), @DIACHI NVARCHAR(50), @MSHH INT, @NAMHH INT
AS
BEGIN
	IF EXISTS (SELECT * FROM HOCHAM WHERE MSHH = @MSHH)
	BEGIN
		INSERT INTO GIAOVIEN VALUES(@MSGV, @TENGV, @SODT, @DIACHI, @MSHH, @NAMHH)
	END
	ELSE BEGIN
		PRINT N'MSHH chưa tồn tại'
		RETURN 0
	END
END
--Test
--chưa có
EXEC PRO_INSERT_GV '0094', N'Lê Trần Anh Quí', N'TP Quảng Ngãi', '0791234567', 3, '2024'

--đã có
EXEC PRO_INSERT_GV '0094', N'Lê Trần Anh Quí', N'TP Quảng Ngãi', '0791234567',2, '2024'

----2. Tham số vào là MSGV, TENGV, SODT, DIACHI, MSHH, NAMHH. Trước khi insert dữ liệu cần kiểm tra MSGV trong table GIAOVIEN có trùng không, nếu trùng thì trả về giá trị 0.

CREATE PROCEDURE PROC_INSERT_GV2
@MSGV VARCHAR(20), @TENGV NVARCHAR(30), @SODT NVARCHAR(10), @DIACHI NVARCHAR(50), @MSHH INT, @NAMHH INT
AS
BEGIN
	IF EXISTS(SELECT*FROM GIAOVIEN WHERE MSGV = @MSGV)
	BEGIN
		PRINT N'MSGV ĐÃ TỒN TẠI'
		RETURN 0
	END
	ELSE BEGIN
		INSERT INTO GIAOVIEN VALUES(@MSGV, @TENGV, @SODT, @DIACHI, @MSHH, @NAMHH)
	END
END

--Test
--ĐÃ CÓ
EXEC PROC_INSERT_GV2 '00201',N'Lê Trần Anh Quí', N'TP Quảng Ngãi', '0791234567', 2, '2024'

--CHƯA TÒN TẠI
EXEC PROC_INSERT_GV2 '21520094',N'Lê Trần Anh Quí', N'TP Quảng Ngãi', '0791234567', 2, '2024'
EXEC PROC_INSERT_GV2 '294',N'Chu Tiến', N'TP Vinh', '07912347', 2, '2024'


DELETE FROM GIAOVIEN WHERE MSGV = '21520094'
----3. Giống (1) và (2) kiểm tra xem MSGV có trùng không? MSHH có tồn tại chưa? Nếu MSGV trùng thì trả về 0. Nếu MSHH chưa tồn tại trả về 1, ngược lại cho insert dữ liệu.
CREATE PROCEDURE PRO_INSERT_GV3
@MSGV VARCHAR(20), @TENGV NVARCHAR(30), @SODT NVARCHAR(10), @DIACHI NVARCHAR(50), @MSHH INT, @NAMHH INT
AS
BEGIN
	IF EXISTS(SELECT*FROM GIAOVIEN WHERE MSGV = @MSGV)
	BEGIN
		PRINT N'MSGV ĐÃ TỒN TẠI'
		RETURN 0
	END
	IF NOT EXISTS (SELECT * FROM HOCHAM WHERE MSHH = @MSHH)
	BEGIN
		PRINT N'MSHH CHƯA TỒN TẠI'
		RETURN 1
	END
	ELSE BEGIN
		INSERT INTO GIAOVIEN VALUES(@MSGV, @TENGV, @SODT, @DIACHI, @MSHH, @NAMHH)
	END
END

--Test
DECLARE @RETURN INT
EXEC @RETURN = PRO_INSERT_GV3 '00201',N'Lê Trần Anh Quí', '0791234567', N'TP QUẢNG NGÃI', 2, '2024'
PRINT @RETURN
GO
DECLARE @RETURN INT
EXEC @RETURN = PRO_INSERT_GV3 '21520094', N'Lê Trần Anh Quí', N'TP Quảng Ngãi', '0791234567', 3, '2024'
PRINT @RETURN
GO

EXEC PRO_INSERT_GV3 '21520094',N'Lê Trần Anh Quí', '0791234567', N'QUẢNG NGÃI', 1, '2024'

----4. Đưa vào MSDT cũ, TENDT mới. Hãy cập nhật tên đề tài mới với mã đề tài cũ không đổi nếu không tìm thấy trả về 0, ngược lại cập nhật và trả về 1.
CREATE PROCEDURE PRO_UP_DT
@MSDT VARCHAR(20), @TENDT NVARCHAR(50)
AS
BEGIN
	IF EXISTS(SELECT * FROM DETAI WHERE MSDT = @MSDT)
	BEGIN
		UPDATE DETAI SET TENDT = @TENDT WHERE MSDT = @MSDT 
	END
	ELSE BEGIN
		PRINT N'KHÔNG TÌM THẤY MSDT'
		RETURN 0
	END
END
--Test
EXEC PRO_UP_DT '97009', N'QUẢN LÝ THƯ VIỆN UIT'

EXEC PRO_UP_DT '97001', N'QUẢN LÝ THƯ VIỆN UIT'
--5. Tham số đưa vào MSSV, TENSV mới, DIACHI mới dùng để cập nhật sinh viên trên, nếu không tìm thấy trả về 0, ngược lại cập nhật và trả về 1.
CREATE PROCEDURE PRO_UP_SV
	@MSSV CHAR(8), @TENSV NVARCHAR(30),  @DIACHI NCHAR(50)
AS
BEGIN
	IF EXISTS (SELECT * FROM SINHVIEN WHERE MSSV = @MSSV)
		BEGIN
			UPDATE SINHVIEN
			SET TENSV = @TENSV WHERE MSSV = @MSSV
			RETURN 1
		END
	ELSE
		BEGIN
			PRINT N'KHÔNG TÌM THẤY'
			RETURN 0
		END
END

--Test
EXEC PRO_UP_SV '21520094' , N'Lê Trần Anh Quí', N'Thủ Đức'

EXEC PRO_UP_SV '13520001' , N'Lê Trần Anh Quí', N'Thủ Đức'

-----B. STORED PROCEDUREDS VỚI THAM SỐ VÀO VÀ RA
----1. Đưa vào TENHV trả ra: Số GV thỏa học vị, nếu không tìm thấy trả về 0.
CREATE PROCEDURE PRO_SE_GV
	@TENHV NVARCHAR(20), @SLGV INT OUTPUT
AS
BEGIN
	IF EXISTS (SELECT * FROM HOCVI WHERE TENHV = @TENHV)
		BEGIN
			SELECT @SLGV = COUNT(*)
			FROM HOCVI, GV_HV_CN
			WHERE HOCVI.MSHV = GV_HV_CN.MSHV AND TENHV = @TENHV
		END
	ELSE
		BEGIN
			SET @SLGV = 0
		END
END

--Test
DECLARE @SLGV INT
EXEC PRO_SE_GV N'Thạc si', @SLGV OUTPUT
PRINT N'SỐ GV CÓ HỌC VỊ THẠC SĨ LÀ: ' + CAST(@SLGV AS NVARCHAR)
GO

----2. Đưa vào MSDT cho biết: Điểm trung bình của đề tài, nếu không tìm thấy trả về 0.
CREATE PROCEDURE PRO_SE_DT
	@MSDT CHAR(6), @DTB INT OUTPUT
AS
BEGIN
	IF EXISTS (SELECT * FROM DETAI WHERE MSDT = @MSDT)
		BEGIN
			SELECT @DTB = AVG (GV_HDDT.DIEM + GV_PBDT.DIEM + GV_UVDT.DIEM) / 3
			FROM DETAI,GV_HDDT,GV_PBDT,GV_UVDT
			WHERE DETAI.MSDT = GV_HDDT.MSDT
				AND DETAI.MSDT = GV_PBDT.MSDT
				AND DETAI.MSDT = GV_UVDT.MSDT
				AND DETAI.MSDT = @MSDT
		END
	ELSE
		BEGIN
			PRINT N'KHÔNG TÌM THẤY'
			RETURN 0
		END
END

DECLARE @MSDT CHAR(6), @DTB INT
SET @MSDT = '97001'
EXEC PRO_SE_DT @MSDT, @DTB OUTPUT
PRINT N'ĐIỂM TB CỦA ĐỀ TÀI ' + @MSDT + N' là: ' + CAST(@DTB AS NVARCHAR)


----3. Đưa vào TENGV trả ra: SDT của giáo viên đó, nếu không tìm thấy trả về 0. Nếu trùng tên thì có báo lỗi không? Tại sao? Làm sao để hiện thông báo có bao nhiêu giáo viên trùng tên và trả về các SDT. 
CREATE PROCEDURE PRO_SE_GV2
	@TENGV NVARCHAR(30), @SODT VARCHAR(10) OUTPUT
AS
BEGIN
	DECLARE @COUNT INT;
	SET @COUNT = (SELECT COUNT(*) FROM GIAOVIEN WHERE TENGV = @TENGV);
	IF @COUNT > 1
    BEGIN
        RAISERROR ('Có %d giáo viên trùng tên', 0, 1, @COUNT)
        SELECT SODT FROM GIAOVIEN WHERE TENGV = @TENGV
    END
    ELSE IF @COUNT = 1
    BEGIN
        SELECT SODT FROM GIAOVIEN WHERE TENGV = @TENGV
    END
    ELSE
    BEGIN
        SELECT 0 AS SODT
		PRINT N'KHÔNG TÌM THẤY'
    END
END
--TEST
DECLARE @TENGV NVARCHAR(30), @SODT VARCHAR(10) 
SET @TENGV = N'Chu Tiến'
EXEC PRO_SE_GV2 @TENGV ,@SODT OUTPUT

DECLARE @TENGV NVARCHAR(30), @SODT VARCHAR(10) 
SET @TENGV = N'Nguyễn Văn An'
EXEC PRO_SE_GV2 @TENGV ,@SODT OUTPUT
select * from GIAOVIEN
----4. Đưa vào MSHD cho biết: Điểm trung bình các đề tài của hội đồng đó.
CREATE PROCEDURE PRO_SE_HD
	@MSHD INT, @DTB INT OUTPUT
AS
BEGIN
	IF EXISTS(SELECT * FROM HOIDONG WHERE MSHD = @MSHD)
		BEGIN
			SELECT @DTB = AVG (GV_HDDT.DIEM + GV_PBDT.DIEM + GV_UVDT.DIEM) / 3
			FROM HOIDONG,GV_HDDT,GV_PBDT,GV_UVDT
			WHERE HOIDONG.MSGV = GV_HDDT.MSGV
				AND HOIDONG.MSGV = GV_PBDT.MSGV
				AND HOIDONG.MSGV = GV_UVDT.MSGV
				AND HOIDONG.MSHD = @MSHD
		END
	ELSE
		BEGIN
			RETURN 0
			PRINT N'KHÔNG TÌM THẤY'
		END
END

--Test
DECLARE @MSHD NVARCHAR, @DTB INT
SET @MSHD = '1'

EXEC PRO_SE_HD @MSHD, @DTB OUTPUT
PRINT N'Điếm trung bình của các đề tài ' + @MSHD + N' là: ' + CAST(@DTB AS NVARCHAR)

--5*. Đưa vào TENGV cho biết: Số đề tài hướng dẫn, số đề tài phản biện do giáo viên đó phụ trách. Nếu trùng tên thì có báo lỗi không hay hệ thống sẽ đếm tất cả các đề tài của những giáo viên trùng tên đó?
CREATE PROCEDURE PRO_caub5
	@TENGV NVARCHAR(30),@SODTHD INT OUTPUT,@SODTPB INT OUTPUT
AS
BEGIN
	IF EXISTS(SELECT * FROM GIAOVIEN WHERE TENGV = @TENGV)
		BEGIN
			SELECT @SODTHD = COUNT(*) 
			FROM GIAOVIEN,GV_HDDT
			WHERE GIAOVIEN.MSGV = GV_HDDT.MSGV AND TENGV = @TENGV

			SELECT @SODTPB = COUNT(*)
			FROM GIAOVIEN,GV_PBDT
			WHERE GIAOVIEN.MSGV = GV_PBDT.MSGV AND TENGV = @TENGV
		END
END

--Test
DECLARE @TENGV NVARCHAR(30), @SODTHD INT, @SODTPB INT
SET @TENGV = N'Nguyễn Thị Loan'
EXEC PRO_caub5  @TENGV, @SODTHD OUTPUT,@SODTPB OUTPUT
PRINT N'Số đề tài hướng dẫn: ' + CAST(@SODTHD AS NVARCHAR) + N',số đề tài phản biện: ' + CAST(@SODTPB AS NVARCHAR)

--C. TRIGGER
--1. Tạo Trigger thỏa mãn điều kiện khi xóa một đề tài sẽ xóa các thông tin liên quan.
CREATE TRIGGER TRIGGER_DEL_DT ON DETAI
INSTEAD OF  DELETE
AS
BEGIN
	DELETE FROM HOIDONG_DT WHERE MSDT IN (SELECT MSDT FROM deleted)
	DELETE FROM GV_HDDT WHERE MSDT IN (SELECT MSDT FROM deleted)
	DELETE FROM GV_PBDT WHERE MSDT IN (SELECT MSDT FROM deleted)
	DELETE FROM GV_UVDT WHERE MSDT IN (SELECT MSDT FROM deleted)
	DELETE FROM SV_DETAI WHERE MSDT IN (SELECT MSDT FROM deleted)
	DELETE FROM DETAI WHERE MSDT = '97001'
END

--Test
DELETE DETAI WHERE MSDT = '97001'
select * from DETAI
----2. Tạo Trigger thỏa mãn ràng buộc là một hội đồng không quá 10 đề tài. Dùng “Group by” có được không? Giải thích.
CREATE TRIGGER TRIGGER_INSERT_HDDT_SLDT
ON HOIDONG_DT
FOR INSERT
AS
BEGIN
	IF (SELECT COUNT(*)
		FROM INSERTED, HOIDONG_DT
		WHERE INSERTED.MSHD = HOIDONG_DT.MSHD) > 10
		BEGIN
			ROLLBACK TRANSACTION
			RAISERROR (N'MỘT HỘI ĐỒNG KHÔNG QUÁ 10 ĐỀ TÀI', 16, 1)
			RETURN
		END
END

--Test
INSERT INTO HOIDONG_DT VALUES (1, '97003', N'Được')

--3. Tạo Trigger thỏa mãn ràng buộc là một đề tài không quá 3 sinh viên. Dùng “Group by” có được không? Giải thích.
CREATE TRIGGER TRIGGER_INSERT_SVDT_SLSV
ON SV_DETAI
FOR INSERT
AS
BEGIN
	IF (SELECT COUNT(*) 
	FROM INSERTED,SV_DETAI 
	WHERE INSERTED.MSDT = SV_DETAI.MSDT) > 3
	BEGIN
		ROLLBACK TRANSACTION
		RAISERROR (N'MỘT ĐỀ TÀI KHÔNG QUÁ 3 SINH VIÊN',16,1)
		RETURN
	END
END

--Test
INSERT INTO SV_DETAI VALUES('13520001','97005')
INSERT INTO SV_DETAI VALUES('13520002','97005')

----4. Tạo Trigger thỏa mãn ràng buộc là một giáo viên muốn có học hàm PGS phải là tiến sĩ.
CREATE TRIGGER TRIGGER_INSERT_UP_GV
ON GIAOVIEN
FOR INSERT,UPDATE
AS
BEGIN
	IF EXISTS ( SELECT * FROM INSERTED WHERE MSHH=1 
		AND NOT EXISTS( 
			SELECT * FROM GV_HV_CN 
			WHERE INSERTED.MSGV=GV_HV_CN.MSGV  AND MSHV=4 ))
	BEGIN
		
		RAISERROR('GIÁO VIÊN CÓ HỌC HÀM PGS PHẢI LÀ TIẾN SĨ', 16, 1)
		ROLLBACK TRANSACTION
	END
END

--Test
INSERT INTO GIAOVIEN VALUES ('00495', N'Thái Bảo',N'Vinh','99047586', 1, '2009')

------D. FUNCTION
----1. Viết hàm tính điểm trung bình của một đề tài. Giá trị trả về là điểm trung bình ứng với mã số đề tài nhập vào
CREATE FUNCTION TINHDTB (@MSDT CHAR(6)) RETURNS FLOAT
AS
BEGIN
	DECLARE @DTB FLOAT
	IF EXISTS (SELECT * FROM DETAI WHERE MSDT = @MSDT)
	BEGIN
		SELECT @DTB = AVG(DIEM) FROM
			(SELECT * FROM GV_HDDT UNION
			SELECT * FROM GV_PBDT UNION
			SELECT * FROM GV_UVDT) AS DIEMTONGHOP WHERE MSDT = @MSDT
	END

	IF @DTB IS NULL
	SET @DTB = 0
	RETURN @DTB
END

--Test
SELECT DBO.TINHDTB('97005') AS DTB

--2. Trả về kết quả của đề tài theo MSDT nhập vào. Kết quả là DAT nếu như điểm trung bình từ 5 trở lên, và KHONGDAT nếu như điểm trung bình dưới 5.
CREATE FUNCTION DTB_DT_XET (@MSDT CHAR(6)) RETURNS NVARCHAR(20)
AS
BEGIN
	DECLARE @DTB FLOAT
	SELECT @DTB =AVG(DIEM) FROM (
		SELECT * FROM GV_HDDT UNION
		SELECT * FROM GV_PBDT UNION 
		SELECT * FROM GV_UVDT ) AS DIEMTONGHOP
	WHERE  MSDT = @MSDT
	IF @DTB IS NULL SET @DTB = 0

	DECLARE @XET NVARCHAR(20)
	IF(@DTB<5) SET @XET = N'KHÔNG ĐẠT'
	ELSE SET @XET = N'ĐẠT'
	RETURN @XET
END

--Test
SELECT DBO.DTB_DT_XET('97002') AS KQ

----3*. Đưa vào MSDT, trả về mã số và họ tên của các sinh viên thực hiện đề tài.
CREATE FUNCTION MSDT_HOTEN_MS (@MSDT CHAR(6)) RETURNS TABLE
AS RETURN
	(SELECT SINHVIEN.MSSV,TENSV 
	FROM SINHVIEN,SV_DETAI 
	WHERE SINHVIEN.MSSV=SV_DETAI.MSSV AND MSDT = @MSDT)

--Test
SELECT * FROM  DBO.MSDT_HOTEN_MS('97002')

--E. CURSOR
--Tạo một bảng tên là DETAI_DIEM. Cấu trúc bảng như sau:
--DETAI_DIEM(MSDT, DIEMTB)
CREATE TABLE DETAI_DIEM(
	MSDT varchar(20) PRIMARY KEY,
	DIEMTB int
)
drop table DETAI_DIEM
--1. Viết Cursor tính điểm trung bình cho từng đề tài. Sau đó lưu kết quả vào bảng DETAI_DIEM.
DECLARE @DUYET CURSOR, @MSDT CHAR(6), @DTB FLOAT;
SET @DUYET = CURSOR FOR SELECT MSDT FROM DETAI
OPEN @DUYET
FETCH NEXT FROM @DUYET INTO @MSDT
WHILE @@FETCH_STATUS = 0 
BEGIN 
	SET @DTB = DBO.TINHDTB(@MSDT)
	INSERT INTO DETAI_DIEM VALUES (@MSDT, @DTB)
	FETCH NEXT FROM @DUYET INTO @MSDT
END
CLOSE @DUYET
DEALLOCATE @DUYET
--Test
SELECT * FROM DETAI_DIEM

--2. Gom các bước xử lý của Cursor ở câu 1 vào một Stored Procedure.
CREATE PROCEDURE DETAI_DTB @DIEMTB FLOAT OUTPUT
AS
BEGIN
	DECLARE @MSDT CHAR(6)
	DECLARE CUR_DIEM_DETAI CURSOR FOR SELECT MSDT FROM DETAI

	OPEN CUR_DIEM_DETAI
	FETCH NEXT FROM CUR_DIEM_DETAI INTO @MSDT

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SELECT @DIEMTB = AVG(DIEM) FROM (
        SELECT DIEM FROM GV_HDDT WHERE MSDT = @MSDT
        UNION ALL SELECT DIEM FROM GV_PBDT WHERE MSDT = @MSDT
        UNION ALL SELECT DIEM FROM GV_UVDT WHERE MSDT = @MSDT
		) AS DIEM

		INSERT INTO DETAI_DIEM(MSDT, DIEMTB)
		VALUES(@MSDT, @DIEMTB)

		FETCH NEXT FROM CUR_DIEM_DETAI INTO @MSDT
	END

	CLOSE CUR_DIEM_DETAI
	DEALLOCATE CUR_DIEM_DETAI
END

--Test
DECLARE @DTB INT
EXEC DETAI_DTB @DTB OUT
SELECT * FROM DETAI_DIEM

--3*. Tạo thêm cột XEPLOAI có kiểu là NVARCHAR(20) trong bảng DETAI_DIEM, viết Cursor cập nhật kết quả xếp loại cho mỗi đề tài như sau:
--+ "Xuất sắc": điểm trung bình từ 9 đến 10.
--+ "Giỏi": điểm trung bình từ 8 đến 9.
--+ "Khá": điểm trung bình từ 7 đến 8.
--+ "Trung bình": điểm trung bình từ 5 đến 6
--+ "Không đạt": điểm trung bình dưới 5.
ALTER TABLE DETAI_DIEM ADD XEPLOAI NVARCHAR(20)

DECLARE @CURSORXL CURSOR ,@MSDT CHAR(6), @DTB FLOAT, @XEPLOAI NVARCHAR(20)
SET @CURSORXL = CURSOR FOR SELECT MSDT FROM DETAI
OPEN @CURSORXL
FETCH NEXT FROM @CURSORXL INTO @MSDT
WHILE(@@FETCH_STATUS = 0)
	BEGIN
		SELECT @DTB = AVG(DIEM)
		FROM(SELECT * FROM GV_HDDT UNION
			SELECT * FROM GV_PBDT UNION
			SELECT * FROM GV_UVDT) AS DIEMTB		
		WHERE MSDT = @MSDT
		IF( @DTB < 5) SET @XEPLOAI = N'Không đạt'
		ELSE IF( @DTB >= 5 AND  @DTB <= 6) SET @XEPLOAI = N'Trung bình'
		ELSE IF( @DTB >= 7 AND @DTB <8) SET @XEPLOAI = N'Khá'
		ELSE IF( @DTB >= 8 AND @DTB < 9) SET @XEPLOAI = N'Giỏi'
		ELSE SET @XEPLOAI = N'Xuất sắc'
		INSERT INTO DETAI_DIEM VALUES(@MSDT,@DTB,@XEPLOAI)
		FETCH NEXT FROM @CURSORXL INTO @MSDT
	END
CLOSE @CURSORXL
DEALLOCATE @CURSORXL
--Test
SELECT * FROM DETAI_DIEM